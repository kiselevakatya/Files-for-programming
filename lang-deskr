%scaner_name Lexer
%codes_type lexem_code

%ident_name Id

%token_fields
"unsigned __int128 int_val;__float128 float_val;"

%class_members
"__int128 int_part;__int128 fract_part;size_t power;ssize_t sign;size_t num_of_digits_in_frac_part;bool is_float;char32_t precision;"

%codes
  sp,     bp,
  r0,     r1,     r2,       r3,       r4,     r5,
  r6,     r7,     r8,       r9,       r10,    r11,
  r12,    r13,    r14,      r15,      r16,    r17,
  r18,    r19,    r20,      r21,      r22,    r23,
  r24,    r25,    r26,      r27,      r28,    r29,
  r30,    r31,
  f0,     f1,     f2,       f3,       f4,     f5,
  f6,     f7,     f8,       f9,       f10,    f11,
  f12,    f13,    f14,      f15,      f16,    f17,
  f18,    f19,    f20,      f21,      f22,    f23,
  f24,    f25,    f26,      f27,      f28,    f29,
f30, f31,

Equal,             Plus,               Minus,
Mul,               Div,                Mod,
LT,                GT,                 LEQ,
GEQ,               Nequal,             FDiv,
Lor,               LNor,               LNot,
LAnd,              LNand,              LXor,
LNXor,             Bor,                BNor,
BXor,              BNXor,              BAnd,
BNAnd,             LShift,             RShift,
BNot,              Pow,                FPow,
Assign,            Open_func,          close_func,
Open_round,        Close_round,        cond_op,
after_label,       Open_square,        Close_square,
Semicolon,         Comma,              Dim_size,
Colon,

String, If, Float,
Else, Var, Int,
Bool, Char, Void,
Array, True, False,
Proto, Func, Const,
Elif, Endif, For,
In, While, Repeat,
Until, Exit, Continue,
Return, Read, Print,
Kw_var,Kw_string,Kw_float,
Kw_int,Kw_char, Kw_void,
Single, Double, Extended, Quatro


%idents {[:Letter:]|[:letter:]|_}{[:Letter:]|[:letter:]|_|[:digits:]}
%impl_additions "
  #include <quadmath>

  size_t digit2int(char32_t ch) {
    size_t v = ch - U'0';
    return (v<=9)? v : (v&0b1101'1111) - 7;
  }
  __int128 setexp(char32_t ch) {
    return (ch == '-')? -1 : 1;
  }

  __float128 lexem_code: build_float(){
    return int_part + fract_part*powq(10,-num_of_digits_in_frac_part)+sign*power;
  }

  lexem_code precision2code(char32_t ch){
    switch (ch) {
      case: 'S':
        return Single;
        break;
      case: 'D':
        return Double;
        break;
      case: 'E':
        return Extended;
        break;
      case: 'Q':
        return Quatro;
        break;
      default:
        return Single;
        break;
    }
  }
"


%keywords
"если" : If, "иначе" : Else, "цел" : Kw_int, "перем" : Var, "вещ" : Kw_float,"лог" : Kw_bool,
"симв" : Kw_char, "строка" : Kw_string, "ничто" : Kw_void, "массив" : Array, "истина": True,
"ложь" : False,"прото" : Proto, "функ" : Func, "конст" : Const, "то" : To, "инес" : Elif, "всё" : Endif,
"для" : For, "из" : In,"пока" : While, "повторяй" : Repeat, "покуда" : Until, "выйди" : Exit,
"продолжи" : Continue, "возврат" : Return, "ввод": Read, "вывод" : Print

%delimiters
"=" : Equal, "+" : Plus, "-" : Minus, "*" : Mul, "/" : Div, "%": Mod,"<": LT, ">":GT, 
"<=": LEQ, ">=":GEQ, "!=":Nequal,"/.": FDiv, "||": Lor,"!||": LNor, "!":LNot, "&&": LAnd, 
"!&&": LNAnd, "^^": LXor,"!^^": LNXor,"^":BXor,"~^":BNXor,"|":Bor, "~|":BNor,"&":BAnd, 
"~&":BNAnd, "<<":LShift,">>":RShift,"~":BNot, "**":Pow, "**.":FPow,":=":Assign, 
"{":Open_func,"}":close_func, "(":Open_round, ")":Close_round,"#":Dim_size, "?":cond_op,
";":Semicolon,"::":after_label,"[": Open_square,"]":Close_square,":":Colon, ",": Comma

%numbers "int_val = 0; float_val = 0; is_float = false; int_part = 0; fract_part = 0; power = 1; sign = 1;num_of_digits_in_frac_part = 0;token.code = Int;":"
          if(is_float){
            token.float_val=build_float();
            token.code = precision2code(precision);
          } else {
            token.int_val=int_part;
            token.code = Int;
          }"	
          %action addHexDigit "int_part = (int_part << 4) + digit2int(ch);"
          %action addDecDigit "int_part = int_part * 10 + digit2int(ch);"
          %action addBinDigit "int_part = (int_part << 1) + digit2int(ch);"
          %action addOctDigit "int_part = (int_part << 3) + digit2int(ch);"
          %action flag_is_float "is_float = true;"

          %action addDecPower "epower = power * 10 + digit2int(ch);"
          %action addDecFrac "fract_part = fract_part / 10 + digit2int(ch); num_of_digits_in_frac_part;bool is_float += 1;"
          %action setSign "sign = setexp(ch);"
          %action setPrecision "precision = ch; is_float = true;"
	                                
{[:digits:]$addDecDigit('?[:digits:]$addDecDigit)*(.$flag_is_float[:digits:]$addDecFrac('?[:digits:]$addDecFrac*))
?(((S|s)|(D|d)|(E|e)|(Q|q))$setPrecision+|-$setSign?[:digits:]$addDecPower('?[:digits:]$addDecPower)*)?|
0o[:odigits:]$addOctDigit('?[:odigits:]$addOctDigit)*|
0(b|B)[:bdigits:]$addBinDigit('?[:bdigits:]$addBinDigit)*|
0(x|X)[:xdigits:]$addHexDigit('?[:xdigits:]$addHexDigit)*}
